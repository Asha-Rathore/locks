///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class NHLStandingsModelData {
/*
{
  "Season": 2024,
  "SeasonType": 1,
  "TeamID": 1,
  "Key": "BOS",
  "City": "Boston",
  "Name": "Bruins",
  "Conference": "Eastern",
  "Division": "Atlantic",
  "Wins": 3,
  "Losses": 0,
  "OvertimeLosses": 0,
  "Percentage": 1,
  "ConferenceWins": 0,
  "ConferenceLosses": 0,
  "DivisionWins": 0,
  "DivisionLosses": 0,
  "ShutoutWins": 0,
  "ConferenceRank": 1,
  "DivisionRank": 1,
  "GlobalTeamID": 30000001
}
*/

  int? Season;
  int? SeasonType;
  int? TeamID;
  String? Key;
  String? City;
  String? Name;
  String? Conference;
  String? Division;
  num? TotalGamePlayed;
  num? TotalPoints;
  num? Wins;
  num? Losses;
  num? OvertimeLosses;
  //int? Percentage;
  num? ConferenceWins;
  num? ConferenceLosses;
  num? DivisionWins;
  num? DivisionLosses;
  num? ShutoutWins;
  int? ConferenceRank;
  int? DivisionRank;
  int? GlobalTeamID;

  NHLStandingsModelData({
    this.Season,
    this.SeasonType,
    this.TeamID,
    this.Key,
    this.City,
    this.Name,
    this.Conference,
    this.Division,
    this.Wins,
    this.Losses,
    this.TotalGamePlayed,
    this.TotalPoints,
    this.OvertimeLosses,
    this.ConferenceWins,
    this.ConferenceLosses,
    this.DivisionWins,
    this.DivisionLosses,
    this.ShutoutWins,
    this.ConferenceRank,
    this.DivisionRank,
    this.GlobalTeamID,
  });
  NHLStandingsModelData.fromJson(Map<String, dynamic> json) {
    Season = json['Season']?.toInt();
    SeasonType = json['SeasonType']?.toInt();
    TeamID = json['TeamID']?.toInt();
    Key = json['Key']?.toString();
    City = json['City']?.toString();
    Name = json['Name']?.toString();
    Conference = json['Conference']?.toString();
    Division = json['Division']?.toString();
    Wins = json['Wins']?.toInt();
    Losses = json['Losses']?.toInt();
    OvertimeLosses = json['OvertimeLosses']?.toInt();
    TotalGamePlayed = (Wins ?? 0) + (Losses ?? 0) + (OvertimeLosses ?? 0);
    TotalPoints = ((Wins ?? 0) * 2)  + ((OvertimeLosses ?? 0) * 1);
    ConferenceWins = json['ConferenceWins']?.toInt();
    ConferenceLosses = json['ConferenceLosses']?.toInt();
    DivisionWins = json['DivisionWins']?.toInt();
    DivisionLosses = json['DivisionLosses']?.toInt();
    ShutoutWins = json['ShutoutWins']?.toInt();
    ConferenceRank = json['ConferenceRank']?.toInt();
    DivisionRank = json['DivisionRank']?.toInt();
    GlobalTeamID = json['GlobalTeamID']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['Season'] = Season;
    data['SeasonType'] = SeasonType;
    data['TeamID'] = TeamID;
    data['Key'] = Key;
    data['City'] = City;
    data['Name'] = Name;
    data['Conference'] = Conference;
    data['Division'] = Division;
    data['Wins'] = Wins;
    data['Losses'] = Losses;
    data['OvertimeLosses'] = OvertimeLosses;
    data['TotalGamePlayed'] = TotalGamePlayed;
    data['TotalPoints'] = TotalPoints;
    data['ConferenceWins'] = ConferenceWins;
    data['ConferenceLosses'] = ConferenceLosses;
    data['DivisionWins'] = DivisionWins;
    data['DivisionLosses'] = DivisionLosses;
    data['ShutoutWins'] = ShutoutWins;
    data['ConferenceRank'] = ConferenceRank;
    data['DivisionRank'] = DivisionRank;
    data['GlobalTeamID'] = GlobalTeamID;
    return data;
  }
}

class NHLStandingsModel {
/*
{
  "data": [
    {
      "Season": 2024,
      "SeasonType": 1,
      "TeamID": 1,
      "Key": "BOS",
      "City": "Boston",
      "Name": "Bruins",
      "Conference": "Eastern",
      "Division": "Atlantic",
      "Wins": 3,
      "Losses": 0,
      "OvertimeLosses": 0,
      "Percentage": 1,
      "ConferenceWins": 0,
      "ConferenceLosses": 0,
      "DivisionWins": 0,
      "DivisionLosses": 0,
      "ShutoutWins": 0,
      "ConferenceRank": 1,
      "DivisionRank": 1,
      "GlobalTeamID": 30000001
    }
  ]
}
*/

  List<NHLStandingsModelData?>? data;

  NHLStandingsModel({
    this.data,
  });
  NHLStandingsModel.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <NHLStandingsModelData>[];
      v.forEach((v) {
        arr0.add(NHLStandingsModelData.fromJson(v));
      });
      this.data = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    return data;
  }
}

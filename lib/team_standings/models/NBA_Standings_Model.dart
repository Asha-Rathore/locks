///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class NBAStandingsModelData {
/*
{
  "Season": 2023,
  "SeasonType": 1,
  "TeamID": 9,
  "Key": "BOS",
  "City": "Boston",
  "Name": "Celtics",
  "Conference": "Eastern",
  "Division": "Atlantic",
  "Wins": 57,
  "Losses": 25,
  "Percentage": 0.695,
  "ConferenceWins": 34,
  "ConferenceLosses": 18,
  "DivisionWins": 11,
  "DivisionLosses": 5,
  "HomeWins": 32,
  "HomeLosses": 9,
  "AwayWins": 25,
  "AwayLosses": 16,
  "LastTenWins": 8,
  "LastTenLosses": 2,
  "PointsPerGameFor": 117.93,
  "PointsPerGameAgainst": 111.41,
  "Streak": 3,
  "GamesBack": 1,
  "StreakDescription": "W3",
  "GlobalTeamID": 20000009,
  "ConferenceRank": 2,
  "DivisionRank": 1
}
*/

  int? Season;
  int? SeasonType;
  int? TeamID;
  String? Key;
  String? City;
  String? Name;
  String? Conference;
  String? Division;
  num? Wins;
  num? Losses;
  String? Percentage;
  int? ConferenceWins;
  int? ConferenceLosses;
  int? DivisionWins;
  int? DivisionLosses;
  int? HomeWins;
  int? HomeLosses;
  int? AwayWins;
  int? AwayLosses;
  int? LastTenWins;
  int? LastTenLosses;
  num? PointsPerGameFor;
  num? PointsPerGameAgainst;
  num? Streak;
  String? GamesBack;
  String? StreakDescription;
  int? GlobalTeamID;
  int? ConferenceRank;
  int? DivisionRank;

  NBAStandingsModelData({
    this.Season,
    this.SeasonType,
    this.TeamID,
    this.Key,
    this.City,
    this.Name,
    this.Conference,
    this.Division,
    this.Wins,
    this.Losses,
    this.Percentage,
    this.ConferenceWins,
    this.ConferenceLosses,
    this.DivisionWins,
    this.DivisionLosses,
    this.HomeWins,
    this.HomeLosses,
    this.AwayWins,
    this.AwayLosses,
    this.LastTenWins,
    this.LastTenLosses,
    this.PointsPerGameFor,
    this.PointsPerGameAgainst,
    this.Streak,
    this.GamesBack,
    this.StreakDescription,
    this.GlobalTeamID,
    this.ConferenceRank,
    this.DivisionRank,
  });
  NBAStandingsModelData.fromJson(Map<String, dynamic> json) {
    Season = json['Season']?.toInt();
    SeasonType = json['SeasonType']?.toInt();
    TeamID = json['TeamID']?.toInt();
    Key = json['Key']?.toString();
    City = json['City']?.toString();
    Name = json['Name']?.toString();
    Conference = json['Conference']?.toString();
    Division = json['Division']?.toString();
    Wins = json['Wins']?.toInt();
    Losses = json['Losses']?.toInt();
    Percentage = json['Percentage']?.toStringAsFixed(2);
    ConferenceWins = json['ConferenceWins']?.toInt();
    ConferenceLosses = json['ConferenceLosses']?.toInt();
    DivisionWins = json['DivisionWins']?.toInt();
    DivisionLosses = json['DivisionLosses']?.toInt();
    HomeWins = json['HomeWins']?.toInt();
    HomeLosses = json['HomeLosses']?.toInt();
    AwayWins = json['AwayWins']?.toInt();
    AwayLosses = json['AwayLosses']?.toInt();
    LastTenWins = json['LastTenWins']?.toInt();
    LastTenLosses = json['LastTenLosses']?.toInt();
    PointsPerGameFor = json['PointsPerGameFor']?.toDouble();
    PointsPerGameAgainst = json['PointsPerGameAgainst']?.toDouble();
    Streak = json['Streak']?.toInt();
    GamesBack = json['GamesBack']?.toStringAsFixed(1);
    StreakDescription = json['StreakDescription']?.toString();
    GlobalTeamID = json['GlobalTeamID']?.toInt();
    ConferenceRank = json['ConferenceRank']?.toInt();
    DivisionRank = json['DivisionRank']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['Season'] = Season;
    data['SeasonType'] = SeasonType;
    data['TeamID'] = TeamID;
    data['Key'] = Key;
    data['City'] = City;
    data['Name'] = Name;
    data['Conference'] = Conference;
    data['Division'] = Division;
    data['Wins'] = Wins;
    data['Losses'] = Losses;
    data['Percentage'] = Percentage;
    data['ConferenceWins'] = ConferenceWins;
    data['ConferenceLosses'] = ConferenceLosses;
    data['DivisionWins'] = DivisionWins;
    data['DivisionLosses'] = DivisionLosses;
    data['HomeWins'] = HomeWins;
    data['HomeLosses'] = HomeLosses;
    data['AwayWins'] = AwayWins;
    data['AwayLosses'] = AwayLosses;
    data['LastTenWins'] = LastTenWins;
    data['LastTenLosses'] = LastTenLosses;
    data['PointsPerGameFor'] = PointsPerGameFor;
    data['PointsPerGameAgainst'] = PointsPerGameAgainst;
    data['Streak'] = Streak;
    data['GamesBack'] = GamesBack;
    data['StreakDescription'] = StreakDescription;
    data['GlobalTeamID'] = GlobalTeamID;
    data['ConferenceRank'] = ConferenceRank;
    data['DivisionRank'] = DivisionRank;
    return data;
  }
}

class NBAStandingsModel {
/*
{
  "data": [
    {
      "Season": 2023,
      "SeasonType": 1,
      "TeamID": 9,
      "Key": "BOS",
      "City": "Boston",
      "Name": "Celtics",
      "Conference": "Eastern",
      "Division": "Atlantic",
      "Wins": 57,
      "Losses": 25,
      "Percentage": 0.695,
      "ConferenceWins": 34,
      "ConferenceLosses": 18,
      "DivisionWins": 11,
      "DivisionLosses": 5,
      "HomeWins": 32,
      "HomeLosses": 9,
      "AwayWins": 25,
      "AwayLosses": 16,
      "LastTenWins": 8,
      "LastTenLosses": 2,
      "PointsPerGameFor": 117.93,
      "PointsPerGameAgainst": 111.41,
      "Streak": 3,
      "GamesBack": 1,
      "StreakDescription": "W3",
      "GlobalTeamID": 20000009,
      "ConferenceRank": 2,
      "DivisionRank": 1
    }
  ]
}
*/

  List<NBAStandingsModelData?>? data;

  NBAStandingsModel({
    this.data,
  });
  NBAStandingsModel.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <NBAStandingsModelData>[];
      v.forEach((v) {
        arr0.add(NBAStandingsModelData.fromJson(v));
      });
      this.data = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    return data;
  }
}

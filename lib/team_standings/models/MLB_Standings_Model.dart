///
/// Code generated by jsonToDartModel https://ashamp.github.io/jsonToDartModel/
///
class MLBStandingsModelData {
/*
{
  "Season": 2023,
  "SeasonType": 1,
  "TeamID": 20,
  "Key": "MIN",
  "City": "Minnesota",
  "Name": "Twins",
  "Conference": "AL",
  "Division": "Central",
  "Wins": 87,
  "Losses": 75,
  "Percentage": 0.5370370370370371,
  "DivisionWins": 29,
  "DivisionLosses": 23,
  "GamesBehind": 0,
  "LastTenGamesWins": 7,
  "LastTenGamesLosses": 3,
  "Streak": "L1",
  "LeagueRank": 7,
  "DivisionRank": 1,
  "WildCardRank": 8,
  "WildCardGamesBehind": 5.5,
  "HomeWins": 47,
  "HomeLosses": 34,
  "AwayWins": 40,
  "AwayLosses": 41,
  "DayWins": 34,
  "DayLosses": 35,
  "NightWins": 53,
  "NightLosses": 40,
  "RunsScored": 778,
  "RunsAgainst": 659,
  "GlobalTeamID": 10000020
}
*/

  int? Season;
  int? SeasonType;
  int? TeamID;
  String? Key;
  String? City;
  String? Name;
  String? Conference;
  String? Division;
  num? Wins;
  num? Losses;
  String? Percentage;
  int? DivisionWins;
  int? DivisionLosses;
  num? GamesBehind;
  int? LastTenGamesWins;
  int? LastTenGamesLosses;
  String? Streak;
  int? ConferenceRank;
  int? DivisionRank;
  int? WildCardRank;
  double? WildCardGamesBehind;
  int? HomeWins;
  int? HomeLosses;
  int? AwayWins;
  int? AwayLosses;
  int? DayWins;
  int? DayLosses;
  int? NightWins;
  int? NightLosses;
  int? RunsScored;
  int? RunsAgainst;
  int? GlobalTeamID;

  MLBStandingsModelData({
    this.Season,
    this.SeasonType,
    this.TeamID,
    this.Key,
    this.City,
    this.Name,
    this.Conference,
    this.Division,
    this.Wins,
    this.Losses,
    this.Percentage,
    this.DivisionWins,
    this.DivisionLosses,
    this.GamesBehind,
    this.LastTenGamesWins,
    this.LastTenGamesLosses,
    this.Streak,
    this.ConferenceRank,
    this.DivisionRank,
    this.WildCardRank,
    this.WildCardGamesBehind,
    this.HomeWins,
    this.HomeLosses,
    this.AwayWins,
    this.AwayLosses,
    this.DayWins,
    this.DayLosses,
    this.NightWins,
    this.NightLosses,
    this.RunsScored,
    this.RunsAgainst,
    this.GlobalTeamID,
  });
  MLBStandingsModelData.fromJson(Map<String, dynamic> json) {
    Season = json['Season']?.toInt();
    SeasonType = json['SeasonType']?.toInt();
    TeamID = json['TeamID']?.toInt();
    Key = json['Key']?.toString();
    City = json['City']?.toString();
    Name = json['Name']?.toString();
    Conference = json['League']?.toString();
    Division = json['Division']?.toString();
    Wins = json['Wins']?.toInt();
    Losses = json['Losses']?.toInt();
    Percentage = json['Percentage']?.toStringAsFixed(2);
    DivisionWins = json['DivisionWins']?.toInt();
    DivisionLosses = json['DivisionLosses']?.toInt();
    GamesBehind = json['GamesBehind']?.toInt();
    LastTenGamesWins = json['LastTenGamesWins']?.toInt();
    LastTenGamesLosses = json['LastTenGamesLosses']?.toInt();
    Streak = json['Streak']?.toString();
    ConferenceRank = json['LeagueRank']?.toInt();
    DivisionRank = json['DivisionRank']?.toInt();
    WildCardRank = json['WildCardRank']?.toInt();
    WildCardGamesBehind = json['WildCardGamesBehind']?.toDouble();
    HomeWins = json['HomeWins']?.toInt();
    HomeLosses = json['HomeLosses']?.toInt();
    AwayWins = json['AwayWins']?.toInt();
    AwayLosses = json['AwayLosses']?.toInt();
    DayWins = json['DayWins']?.toInt();
    DayLosses = json['DayLosses']?.toInt();
    NightWins = json['NightWins']?.toInt();
    NightLosses = json['NightLosses']?.toInt();
    RunsScored = json['RunsScored']?.toInt();
    RunsAgainst = json['RunsAgainst']?.toInt();
    GlobalTeamID = json['GlobalTeamID']?.toInt();
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    data['Season'] = Season;
    data['SeasonType'] = SeasonType;
    data['TeamID'] = TeamID;
    data['Key'] = Key;
    data['City'] = City;
    data['Name'] = Name;
    data['League'] = Conference;
    data['Division'] = Division;
    data['Wins'] = Wins;
    data['Losses'] = Losses;
    data['Percentage'] = Percentage;
    data['DivisionWins'] = DivisionWins;
    data['DivisionLosses'] = DivisionLosses;
    data['GamesBehind'] = GamesBehind;
    data['LastTenGamesWins'] = LastTenGamesWins;
    data['LastTenGamesLosses'] = LastTenGamesLosses;
    data['Streak'] = Streak;
    data['LeagueRank'] = ConferenceRank;
    data['DivisionRank'] = DivisionRank;
    data['WildCardRank'] = WildCardRank;
    data['WildCardGamesBehind'] = WildCardGamesBehind;
    data['HomeWins'] = HomeWins;
    data['HomeLosses'] = HomeLosses;
    data['AwayWins'] = AwayWins;
    data['AwayLosses'] = AwayLosses;
    data['DayWins'] = DayWins;
    data['DayLosses'] = DayLosses;
    data['NightWins'] = NightWins;
    data['NightLosses'] = NightLosses;
    data['RunsScored'] = RunsScored;
    data['RunsAgainst'] = RunsAgainst;
    data['GlobalTeamID'] = GlobalTeamID;
    return data;
  }
}

class MLBStandingsModel {
/*
{
  "data": [
    {
      "Season": 2023,
      "SeasonType": 1,
      "TeamID": 20,
      "Key": "MIN",
      "City": "Minnesota",
      "Name": "Twins",
      "Conference": "AL",
      "Division": "Central",
      "Wins": 87,
      "Losses": 75,
      "Percentage": 0.5370370370370371,
      "DivisionWins": 29,
      "DivisionLosses": 23,
      "GamesBehind": 0,
      "LastTenGamesWins": 7,
      "LastTenGamesLosses": 3,
      "Streak": "L1",
      "LeagueRank": 7,
      "DivisionRank": 1,
      "WildCardRank": 8,
      "WildCardGamesBehind": 5.5,
      "HomeWins": 47,
      "HomeLosses": 34,
      "AwayWins": 40,
      "AwayLosses": 41,
      "DayWins": 34,
      "DayLosses": 35,
      "NightWins": 53,
      "NightLosses": 40,
      "RunsScored": 778,
      "RunsAgainst": 659,
      "GlobalTeamID": 10000020
    }
  ]
}
*/

  List<MLBStandingsModelData?>? data;

  MLBStandingsModel({
    this.data,
  });
  MLBStandingsModel.fromJson(Map<String, dynamic> json) {
    if (json['data'] != null) {
      final v = json['data'];
      final arr0 = <MLBStandingsModelData>[];
      v.forEach((v) {
        arr0.add(MLBStandingsModelData.fromJson(v));
      });
      this.data = arr0;
    }
  }
  Map<String, dynamic> toJson() {
    final data = <String, dynamic>{};
    if (this.data != null) {
      final v = this.data;
      final arr0 = [];
      v!.forEach((v) {
        arr0.add(v!.toJson());
      });
      data['data'] = arr0;
    }
    return data;
  }
}
